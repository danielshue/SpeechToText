name: .NET Core
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  solution: 'Azure.Cognitive.Services.Speech.Samples.sln'
  AZURE_FUNCTIONAPP_NAME: SpeechToText                                                              # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src/Azure.Cognitive.Services.Speech.Samples/publish_output'    # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '2.2.402'                                                                         # set this to the dotnet version to use

jobs:
  build:
    runs-on: ${{ matrix.os }}    
    strategy:
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
    steps:            
    - uses: actions/checkout@v2
              
    - name: Login via Azure CLI
      uses: azure/login@v1
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}
      if: matrix.os == 'windows-latest'
    
    - name: If Unix, Setup .NET Core for ${{ matrix.os }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101    
      if: matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest'

    - name: Build on ${{ matrix.os }}
      working-directory: './src/Azure.Cognitive.Services.Speech.Samples/'
      run: dotnet build $solution --output ./publish_output --configuration Release  

    - name: Test on ${{ matrix.os }}
      working-directory: './src/Azure.Cognitive.Services.Speech.Samples/'
      run: dotnet test $solution --configuration Release --no-restore --verbosity normal
    
    - name: Archive files on ${{ matrix.os }}
      uses: actions/upload-artifact@v1
      with: 
        name: dist-${{ matrix.os }}
        path: './src/Azure.Cognitive.Services.Speech.Samples/publish_output'
    
    - name: 'Run Azure Functions Action'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
      if: matrix.os == 'windows-latest'
